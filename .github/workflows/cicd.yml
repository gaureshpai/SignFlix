name: CI/CD Pipeline with Comprehensive Security

on:
  push:
    branches:
      - main
      - prod
  pull_request:
    branches:
      - main
      - prod
  schedule:
    - cron: '0 2 * * 0'

permissions:
  contents: write
  security-events: write
  actions: read

jobs:
  gitleaks:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks CLI
        run: |
          sed -i 's/deb.debian.org/archive.debian.org/g' /etc/apt/sources.list
          sed -i 's/security.debian.org/archive.debian.org/g' /etc/apt/sources.list
          sed -i '/buster-updates/d' /etc/apt/sources.list
          apt-get update && apt-get install -y wget tar git
          GITLEAKS_VERSION="8.18.2"
          wget https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz
          tar -xzf gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz
          ./gitleaks detect --source . --verbose

      - name: Upload Gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  codeql_javascript:
    name: CodeQL JavaScript Analysis
    runs-on: ubuntu-latest
    needs: gitleaks
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./site/package-lock.json

      - name: Install dependencies (site)
        working-directory: ./site
        run: npm ci

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          config-file: ./.github/codeql/codeql-config.yml
          working-directory: ./site

      - name: Autobuild (site)
        uses: github/codeql-action/autobuild@v3
        with:
          working-directory: ./site

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
          output: codeql-results-javascript.sarif

      - name: Upload CodeQL SARIF file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results-javascript
          path: codeql-results-javascript.sarif
          if-no-files-found: ignore

  dependency_check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    needs: gitleaks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./site/package-lock.json

      - name: Install Node Dependencies (site)
        run: npm ci
        working-directory: ./site

      - name: Node.js Security Check (npm audit - site)
        run: npm audit --audit-level=moderate --json > npm-audit-site.json || true
        working-directory: ./site

      - name: Upload Dependency Reports (site)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports-site
          path: ./site/npm-audit-site.json

  type_check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: dependency_check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./site/package-lock.json

      - name: Install dependencies (site)
        run: npm ci
        working-directory: ./site

      - name: Run TypeScript type check
        run: npm run type-check
        working-directory: ./site

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [codeql_javascript, dependency_check, type_check]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./site/package-lock.json

      - name: Install Node Dependencies (site)
        run: npm ci
        working-directory: ./site

      - name: Run Tests with Coverage
        run: npm run test -- --coverage --coverageReporters=cobertura
        working-directory: ./site

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./site/coverage/cobertura-coverage.xml
          if-no-files-found: ignore

  accessibility_check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    needs: [tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./site/package-lock.json

      - name: Install dependencies (site)
        run: npm ci
        working-directory: ./site

      - name: Run Accessibility Check
        run: npm run accessibility-check
        working-directory: ./site

  build_and_deploy_nextjs:
    name: Build and Deploy Next.js Site
    runs-on: ubuntu-latest
    needs: [tests, accessibility_check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./site/package-lock.json

      - name: Install dependencies (site)
        run: npm ci
        working-directory: ./site

      - name: Build Next.js application
        run: npm run build
        working-directory: ./site

      - name: Check for environment variable leaks in build output
        run: |
          echo "Checking for sensitive environment variables in Next.js build output..."
          if grep -rE "(API_KEY|SECRET|TOKEN|PASSWORD|DB_URL)=" ./site/.next; then
            echo "::error::Potential environment variable leak detected in Next.js build output!"
            exit 1
          else
            echo "No obvious environment variable leaks detected in Next.js build output."
          fi
        working-directory: ./site

      - name: Basic Security Header Check
        run: |
          echo "Performing basic security header check on built application..."
          # This is a placeholder. A real check would involve deploying to a temporary environment
          # or using a tool that can analyze the built output for security headers.
          # For now, we'll just ensure the build output exists.
          if [ -d "./site/.next" ]; then
            echo "Next.js build output directory exists. Further security header analysis would require deployment or specialized tools."
          else
            echo "::error::Next.js build output directory not found. Cannot perform security header check."
            exit 1
          fi
        working-directory: ./site

      - name: Upload Next.js build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build-site
          path: ./site/.next
          retention-days: 7